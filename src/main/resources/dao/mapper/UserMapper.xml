<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.UserMapper" >
  <resultMap id="BaseResultMap" type="model.User" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="salt" property="salt" jdbcType="VARCHAR" />
    <result column="locked" property="locked" jdbcType="BIT" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="deleted" property="deleted" jdbcType="BIT" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, username, password, salt, locked, create_date, deleted, email, phone
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from users
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from users
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="model.User" >
    insert into users (id, username, password, 
      salt, locked, create_date, 
      deleted, email, phone)
    values (#{id,jdbcType=BIGINT}, #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, 
      #{salt,jdbcType=VARCHAR}, #{locked,jdbcType=BIT}, #{createDate,jdbcType=TIMESTAMP}, 
      #{deleted,jdbcType=BIT}, #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="model.User" >
    insert into users
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="salt != null" >
        salt,
      </if>
      <if test="locked != null" >
        locked,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="deleted != null" >
        deleted,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="phone != null" >
        phone,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null" >
        #{salt,jdbcType=VARCHAR},
      </if>
      <if test="locked != null" >
        #{locked,jdbcType=BIT},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null" >
        #{deleted,jdbcType=BIT},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="model.User" >
    update users
    <set >
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="salt != null" >
        salt = #{salt,jdbcType=VARCHAR},
      </if>
      <if test="locked != null" >
        locked = #{locked,jdbcType=BIT},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="deleted != null" >
        deleted = #{deleted,jdbcType=BIT},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.User" >
    update users
    set username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      salt = #{salt,jdbcType=VARCHAR},
      locked = #{locked,jdbcType=BIT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      deleted = #{deleted,jdbcType=BIT},
      email = #{email,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectUserByName" resultMap="BaseResultMap" parameterType="java.lang.String" >
    select
    <include refid="Base_Column_List" />
    from users
    where username = #{name,jdbcType=VARCHAR}
  </select>

  <resultMap id="RoleResultMap" type="model.Role" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="role" property="role" jdbcType="VARCHAR" />
    <result column="description" property="description" jdbcType="VARCHAR" />
    <result column="available" property="available" jdbcType="BIT" />
  </resultMap>

  <select id="selectRolesByUsername" resultMap="RoleResultMap" parameterType="java.lang.String" >
    SELECT r.id as id,r.role as role,r.description as description,r.available as available
    FROM users_roles ur INNER JOIN users u on ur.user_id = u.id
    INNER JOIN roles r on ur.role_id = r.id
    WHERE u.username = #{name,jdbcType=VARCHAR}
  </select>

  <select id="selectRolesById" resultMap="RoleResultMap" parameterType="java.lang.Long" >
    SELECT r.id as id,r.role as role,r.description as description,r.available as available
    FROM users_roles ur INNER JOIN users u on ur.user_id = u.id
    INNER JOIN roles r on ur.role_id = r.id
    WHERE u.id = #{id,jdbcType=BIGINT}
  </select>

  <select id="selectRoleIdsByUsername" resultType="long" parameterType="java.lang.String" >
    SELECT ur.role_id
    FROM users_roles ur INNER JOIN users u on ur.user_id = u.id
    WHERE u.username = #{name,jdbcType=VARCHAR}
  </select>

  <select id="selectRoleNamesByUsername" resultType="java.lang.String" parameterType="java.lang.String" >
    SELECT r.role as role
    FROM users_roles ur INNER JOIN users u on ur.user_id = u.id
    INNER JOIN roles r on ur.role_id = r.id
    WHERE u.username = #{name,jdbcType=VARCHAR}
  </select>


  <resultMap id="ResourceResultMap" type="model.Resource" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="VARCHAR" />
    <result column="url" property="url" jdbcType="VARCHAR" />
    <result column="parent_id" property="parentId" jdbcType="BIGINT" />
    <result column="parent_ids" property="parentIds" jdbcType="VARCHAR" />
    <result column="permission" property="permission" jdbcType="VARCHAR" />
    <result column="available" property="available" jdbcType="BIT" />
  </resultMap>
  <select id="selectResourcesByUsername" resultMap="ResourceResultMap" parameterType="java.lang.String">

     SELECT p.id,p.name,p.type,p.url,p.parent_id,p.parent_ids,p.permission,p.available from users u
      INNER JOIN users_roles ur on ur.user_id = u.id
      INNER JOIN roles r on ur.role_id = r.id
      INNER JOIN roles_resources rr on rr.role_id = r.id
      INNER JOIN resources p on p.id = rr.resource_id
      WHERE u.username= #{name,jdbcType=VARCHAR}

  </select>

  <select id="selectResourcePermissionsByUsername" resultType="java.lang.String" parameterType="java.lang.String">
    SELECT p.permission from users u
    INNER JOIN users_roles ur on ur.user_id = u.id
    INNER JOIN roles r on ur.role_id = r.id
    INNER JOIN roles_resources rr on rr.role_id = r.id
    INNER JOIN resources p on p.id = rr.resource_id
    WHERE u.username= #{name,jdbcType=VARCHAR}

  </select>

  <select id="selectAll" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from users
  </select>

  <select id="selectByCondition" resultMap="BaseResultMap" parameterType="dao.condition.UserCondition" >
    select
    u.id,u.username,u.password,u.salt,u.locked,u.create_date,u.deleted,u.email,u.phone
    from users u
    <if test="role != null">INNER JOIN users_roles ur on ur.user_id = u.id</if>
    <if test="role != null">INNER JOIN roles r on ur.role_id = r.id</if>
    <where>
      <if test="username != null">and u.username= #{username,jdbcType=VARCHAR}</if>
      <if test="role != null">and r.role like CONCAT('%',#{role,jdbcType=VARCHAR},'%')</if>
    </where>
    <if test="sortby != null">
      ORDER BY ${sortby} ${order}
    </if>
    limit #{start,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
  </select>


</mapper>