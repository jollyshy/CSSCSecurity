<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="dao.NewsMapper" >
  <resultMap id="BaseResultMap" type="model.News" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="newsClassId" property="newsclassid" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="INTEGER" />
    <result column="author" property="author" jdbcType="VARCHAR" />
    <result column="createTime" property="createtime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="model.News" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, newsClassId, title, status, author, createTime
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from news
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from news
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="model.News" >
    insert into news (id, newsClassId, title, 
      status, author, createTime, 
      content)
    values (#{id,jdbcType=INTEGER}, #{newsclassid,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, 
      #{status,jdbcType=INTEGER}, #{author,jdbcType=VARCHAR}, #{createtime,jdbcType=TIMESTAMP}, 
      #{content,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="model.News" >
    insert into news
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="newsclassid != null" >
        newsClassId,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="status != null" >
        status,
      </if>
      <if test="author != null" >
        author,
      </if>
      <if test="createtime != null" >
        createTime,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="newsclassid != null" >
        #{newsclassid,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=INTEGER},
      </if>
      <if test="author != null" >
        #{author,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="model.News" >
    update news
    <set >
      <if test="newsclassid != null" >
        newsClassId = #{newsclassid,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="author != null" >
        author = #{author,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        createTime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="model.News" >
    update news
    set newsClassId = #{newsclassid,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      author = #{author,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=TIMESTAMP},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.News" >
    update news
    set newsClassId = #{newsclassid,jdbcType=INTEGER},
      title = #{title,jdbcType=VARCHAR},
      status = #{status,jdbcType=INTEGER},
      author = #{author,jdbcType=VARCHAR},
      createTime = #{createtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectByCondition" resultMap="ResultMapWithBLOBs" parameterType="dao.condition.NewsCondition" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from news
      <where>
          <if test="title != null">and title like CONCAT('%',#{title,jdbcType=VARCHAR},'%')</if>
          <if test="orderName != null">and newsClassId = #{orderName,jdbcType=INTEGER}</if>
      </where>
      <if test="order != null">
          ORDER BY ${sortby} ${order}
      </if>
      limit #{start,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
  </select>

    <select id="selectByClassId" resultType="java.lang.Integer" parameterType="java.lang.Integer" >
        select id from news
        WHERE newsClassId = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteMany" parameterType="java.util.List">
        DELETE FROM news where id in
        <foreach item="idItem" collection="list" open="(" separator="," close=")">
          #{idItem}
        </foreach>
    </delete>


</mapper>