<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="dao.RegisterMapper">
  <resultMap id="BaseResultMap" type="model.Register">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="phone" jdbcType="VARCHAR" property="phone" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="register_time" jdbcType="TIMESTAMP" property="registerTime" />
  </resultMap>
  <sql id="Base_Column_List">
    id, username, phone, password, register_time
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from register
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from register
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="model.Register">
    insert into register (id, username, phone,
      password, register_time)
    values (#{id,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR},
      #{password,jdbcType=VARCHAR}, #{registerTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="model.Register">
    insert into register
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="phone != null">
        phone,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="registerTime != null">
          register_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null">
        #{registerTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="model.Register">
    update register
    <set>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="phone != null">
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="registerTime != null">
          register_time = #{registerTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="model.Register">
    update register
    set username = #{username,jdbcType=VARCHAR},
      phone = #{phone,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      register_time = #{registerTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectByName" parameterType="java.lang.String" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from register
    where username = #{name,jdbcType=VARCHAR}
  </select>

  <select id="selectAll" resultMap="BaseResultMap" useCache="true">
    select
    <include refid="Base_Column_List" />
    from register
  </select>

  <select id="selectByRegisterCondition" parameterType="dao.condition.RegisterCondition" resultMap="BaseResultMap" useCache="true">
    select <include refid="Base_Column_List" /> from register
      <where>
          <if test="startTime != null">and register_time >= #{startTime,jdbcType=TIMESTAMP}</if>
          <if test="endTime != null">and register_time &lt;= #{endTime,jdbcType=TIMESTAMP}</if>
      </where>
      <if test="order != null">
      ORDER BY ${sortby} ${order}
      </if>
    limit #{start,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
  </select>

    <select id="selectConditionCount" parameterType="dao.condition.RegisterCondition" resultType="long" useCache="true">
        select Count(*) from register
        <where>
            <if test="startTime != null">and register_time >= #{startTime,jdbcType=TIMESTAMP}</if>
            <if test="endTime != null">and register_time &lt;= #{endTime,jdbcType=TIMESTAMP}</if>
        </where>
    </select>

</mapper>